package mg.reservation.service;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import mg.reservation.db.DBConfig;
import mg.reservation.db.OverlappingReservationException;
import mg.reservation.db.Reservation;
import mg.reservation.db.ReservationDao;
import mg.reservation.util.Common;

public class ReservationService {

	private DBConfig dbConfig = null;
	private ReservationDao reservationDao = new ReservationDao();

	public ReservationService(DBConfig dbConfig) {
		this.dbConfig = dbConfig;
	}

	/**
	 * Persists a reservation into the database. 
	 * 
	 * @param reservation The reservation to persist.
	 * @return The the persisted reservation filled with the autogenerated id.
	 * @throws ClassNotFoundException If the database driver can not be loaded.
	 * @throws SQLException On any database errors.
	 * @throws IllegalArgumentException If any of the properties are null.
	 * @throws OverlappingReservationException If the 
	 */
	public Reservation createReservation(Reservation reservation) throws
			ClassNotFoundException,
			SQLException,
			IllegalArgumentException,
			OverlappingReservationException {

		Connection connection = null;
		Reservation reservationStored = null;

		try {
			connection = dbConfig.getConnection();

			List<Reservation> overlappingReservations = reservationDao.findOverlappingByDates(connection, reservation.getResource(), reservation.getStartTime(), reservation.getEndTime());
			if (overlappingReservations.size() > 0) {
				throw new OverlappingReservationException();
			}

			reservationStored = reservationDao.storeReservation(connection, reservation);

		} finally {
			Common.close(connection);
		}
		return reservationStored;
	}
}
